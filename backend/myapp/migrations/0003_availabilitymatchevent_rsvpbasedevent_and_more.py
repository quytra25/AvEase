# Generated by Django 5.2 on 2025-04-17 22:21

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('myapp', '0002_availability_availabilityintheweek_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='AvailabilityMatchEvent',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='myapp.event')),
            ],
            bases=('myapp.event',),
        ),
        migrations.CreateModel(
            name='RsvpBasedEvent',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='myapp.event')),
            ],
            bases=('myapp.event',),
        ),
        migrations.RenameField(
            model_name='availabilityintheweek',
            old_name='day',
            new_name='selected_day',
        ),
        migrations.RenameField(
            model_name='availabilityintheweek',
            old_name='end_time',
            new_name='selected_end_time',
        ),
        migrations.RenameField(
            model_name='availabilityintheweek',
            old_name='start_time',
            new_name='selected_start_time',
        ),
        migrations.RenameField(
            model_name='availabilitystatus',
            old_name='status',
            new_name='rsvp_status',
        ),
        migrations.RenameField(
            model_name='availabledate',
            old_name='date',
            new_name='selected_date',
        ),
        migrations.RenameField(
            model_name='availabledatetime',
            old_name='date',
            new_name='selected_date',
        ),
        migrations.RenameField(
            model_name='availabledatetime',
            old_name='end_time',
            new_name='selected_end_time',
        ),
        migrations.RenameField(
            model_name='availabledatetime',
            old_name='start_time',
            new_name='selected_start_time',
        ),
        migrations.AlterField(
            model_name='event',
            name='type',
            field=models.CharField(choices=[('availability_match', 'Availability Match'), ('rsvp_based', 'RSVP Based')], max_length=20),
        ),
        migrations.CreateModel(
            name='MultiDayEvent',
            fields=[
                ('availabilitymatchevent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='myapp.availabilitymatchevent')),
                ('num_days', models.IntegerField()),
                ('start_date_range', models.DateField()),
                ('end_date_range', models.DateField()),
                ('confirmed_start_date', models.DateField(blank=True, null=True)),
                ('confirmed_end_date', models.DateField(blank=True, null=True)),
            ],
            bases=('myapp.availabilitymatchevent',),
        ),
        migrations.CreateModel(
            name='SingleDayEvent',
            fields=[
                ('availabilitymatchevent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='myapp.availabilitymatchevent')),
                ('start_date_range', models.DateField()),
                ('end_date_range', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_all_day', models.BooleanField(default=False)),
                ('confirmed_date', models.DateField()),
                ('confirmed_start_time', models.TimeField(blank=True, null=True)),
                ('confirmed_end_time', models.TimeField(blank=True, null=True)),
            ],
            bases=('myapp.availabilitymatchevent',),
        ),
        migrations.CreateModel(
            name='WeeklyEvent',
            fields=[
                ('availabilitymatchevent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='myapp.availabilitymatchevent')),
                ('mon_selected', models.BooleanField(default=False)),
                ('tue_selected', models.BooleanField(default=False)),
                ('wed_selected', models.BooleanField(default=False)),
                ('thur_selected', models.BooleanField(default=False)),
                ('fri_selected', models.BooleanField(default=False)),
                ('sat_selected', models.BooleanField(default=False)),
                ('sun_selected', models.BooleanField(default=False)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
            ],
            bases=('myapp.availabilitymatchevent',),
        ),
        migrations.CreateModel(
            name='RsvpMultiDayEvent',
            fields=[
                ('rsvpbasedevent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='myapp.rsvpbasedevent')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
            ],
            bases=('myapp.rsvpbasedevent',),
        ),
        migrations.CreateModel(
            name='RsvpSingleDayEvent',
            fields=[
                ('rsvpbasedevent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='myapp.rsvpbasedevent')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_all_day', models.BooleanField(default=False)),
            ],
            bases=('myapp.rsvpbasedevent',),
        ),
    ]
